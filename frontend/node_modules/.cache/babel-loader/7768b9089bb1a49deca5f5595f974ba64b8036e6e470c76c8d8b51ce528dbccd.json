{"ast":null,"code":"/*! @azure/msal-browser v4.15.0 2025-07-08 */\n'use strict';\n\nimport { AuthError } from '@azure/msal-common/browser';\nimport { invalidPopTokenRequest, invalidBase64String, nativePromptNotSupported, uninitializedPublicClientApplication, nativeConnectionNotEstablished, nativeExtensionNotInstalled, nativeHandshakeTimeout, unableToAcquireTokenFromNativePlatform, databaseUnavailable, spaCodeAndNativeAccountIdPresent, authCodeOrNativeAccountIdRequired, authCodeRequired, cryptoKeyNotFound, unableToLoadToken, failedToParseResponse, getRequestFailed, postRequestFailed, noNetworkConnectivity, databaseNotOpen, nonBrowserEnvironment, invalidCacheType, authRequestNotSetError, unableToParseTokenRequestCacheError, noTokenRequestCacheError, silentPromptValueError, noAccountError, silentLogoutUnsupported, iframeClosedPrematurely, blockNestedPopups, blockIframeReload, redirectInIframe, monitorWindowTimeout, monitorPopupTimeout, userCancelled, emptyWindowError, popupWindowError, interactionInProgress, stateInteractionTypeMismatch, unableToParseState, hashDoesNotContainKnownProperties, noStateInHash, hashEmptyError, emptyNavigateUri, cryptoNonExistent, pkceNotCreated, timedOut, failedToDecryptEarResponse, failedToParseHeaders, failedToBuildHeaders, earJweEmpty, earJwkEmpty } from './BrowserAuthErrorCodes.mjs';\nimport * as BrowserAuthErrorCodes from './BrowserAuthErrorCodes.mjs';\nexport { BrowserAuthErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst ErrorLink = \"For more visit: aka.ms/msaljs/browser-errors\";\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\nconst BrowserAuthErrorMessages = {\n  [pkceNotCreated]: \"The PKCE code challenge and verifier could not be generated.\",\n  [earJwkEmpty]: \"No EAR encryption key provided. This is unexpected.\",\n  [earJweEmpty]: \"Server response does not contain ear_jwe property. This is unexpected.\",\n  [cryptoNonExistent]: \"The crypto object or function is not available.\",\n  [emptyNavigateUri]: \"Navigation URI is empty. Please check stack trace for more info.\",\n  [hashEmptyError]: `Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash. ${ErrorLink}`,\n  [noStateInHash]: \"Hash does not contain state. Please verify that the request originated from msal.\",\n  [hashDoesNotContainKnownProperties]: `Hash does not contain known properites. Please verify that your redirectUri is not changing the hash.  ${ErrorLink}`,\n  [unableToParseState]: \"Unable to parse state. Please verify that the request originated from msal.\",\n  [stateInteractionTypeMismatch]: \"Hash contains state but the interaction type does not match the caller.\",\n  [interactionInProgress]: `Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.   ${ErrorLink}`,\n  [popupWindowError]: \"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.\",\n  [emptyWindowError]: \"window.open returned null or undefined window object.\",\n  [userCancelled]: \"User cancelled the flow.\",\n  [monitorPopupTimeout]: `Token acquisition in popup failed due to timeout.  ${ErrorLink}`,\n  [monitorWindowTimeout]: `Token acquisition in iframe failed due to timeout.  ${ErrorLink}`,\n  [redirectInIframe]: \"Redirects are not supported for iframed or brokered applications. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs.\",\n  [blockIframeReload]: `Request was blocked inside an iframe because MSAL detected an authentication response.  ${ErrorLink}`,\n  [blockNestedPopups]: \"Request was blocked inside a popup because MSAL detected it was running in a popup.\",\n  [iframeClosedPrematurely]: \"The iframe being monitored was closed prematurely.\",\n  [silentLogoutUnsupported]: \"Silent logout not supported. Please call logoutRedirect or logoutPopup instead.\",\n  [noAccountError]: \"No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request.\",\n  [silentPromptValueError]: \"The value given for the prompt value is not valid for silent requests - must be set to 'none' or 'no_session'.\",\n  [noTokenRequestCacheError]: \"No token request found in cache.\",\n  [unableToParseTokenRequestCacheError]: \"The cached token request could not be parsed.\",\n  [authRequestNotSetError]: \"Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler\",\n  [invalidCacheType]: \"Invalid cache type\",\n  [nonBrowserEnvironment]: \"Login and token requests are not supported in non-browser environments.\",\n  [databaseNotOpen]: \"Database is not open!\",\n  [noNetworkConnectivity]: \"No network connectivity. Check your internet connection.\",\n  [postRequestFailed]: \"Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'\",\n  [getRequestFailed]: \"Network request failed. Please check the network trace to determine root cause.\",\n  [failedToParseResponse]: \"Failed to parse network response. Check network trace.\",\n  [unableToLoadToken]: \"Error loading token to cache.\",\n  [cryptoKeyNotFound]: \"Cryptographic Key or Keypair not found in browser storage.\",\n  [authCodeRequired]: \"An authorization code must be provided (as the `code` property on the request) to this flow.\",\n  [authCodeOrNativeAccountIdRequired]: \"An authorization code or nativeAccountId must be provided to this flow.\",\n  [spaCodeAndNativeAccountIdPresent]: \"Request cannot contain both spa code and native account id.\",\n  [databaseUnavailable]: \"IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts.\",\n  [unableToAcquireTokenFromNativePlatform]: `Unable to acquire token from native platform.  ${ErrorLink}`,\n  [nativeHandshakeTimeout]: \"Timed out while attempting to establish connection to browser extension\",\n  [nativeExtensionNotInstalled]: \"Native extension is not installed. If you think this is a mistake call the initialize function.\",\n  [nativeConnectionNotEstablished]: `Connection to native platform has not been established. Please install a compatible browser extension and run initialize().  ${ErrorLink}`,\n  [uninitializedPublicClientApplication]: `You must call and await the initialize function before attempting to call any other MSAL API.  ${ErrorLink}`,\n  [nativePromptNotSupported]: \"The provided prompt is not supported by the native platform. This request should be routed to the web based flow.\",\n  [invalidBase64String]: \"Invalid base64 encoded string.\",\n  [invalidPopTokenRequest]: \"Invalid PoP token request. The request should not have both a popKid value and signPopToken set to true.\",\n  [failedToBuildHeaders]: \"Failed to build request headers object.\",\n  [failedToParseHeaders]: \"Failed to parse response headers\",\n  [failedToDecryptEarResponse]: \"Failed to decrypt ear response\",\n  [timedOut]: \"The request timed out.\"\n};\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use exported BrowserAuthErrorCodes instead.\r\n * In your app you can do :\r\n * ```\r\n * import { BrowserAuthErrorCodes } from \"@azure/msal-browser\";\r\n * ```\r\n */\nconst BrowserAuthErrorMessage = {\n  pkceNotGenerated: {\n    code: pkceNotCreated,\n    desc: BrowserAuthErrorMessages[pkceNotCreated]\n  },\n  cryptoDoesNotExist: {\n    code: cryptoNonExistent,\n    desc: BrowserAuthErrorMessages[cryptoNonExistent]\n  },\n  emptyNavigateUriError: {\n    code: emptyNavigateUri,\n    desc: BrowserAuthErrorMessages[emptyNavigateUri]\n  },\n  hashEmptyError: {\n    code: hashEmptyError,\n    desc: BrowserAuthErrorMessages[hashEmptyError]\n  },\n  hashDoesNotContainStateError: {\n    code: noStateInHash,\n    desc: BrowserAuthErrorMessages[noStateInHash]\n  },\n  hashDoesNotContainKnownPropertiesError: {\n    code: hashDoesNotContainKnownProperties,\n    desc: BrowserAuthErrorMessages[hashDoesNotContainKnownProperties]\n  },\n  unableToParseStateError: {\n    code: unableToParseState,\n    desc: BrowserAuthErrorMessages[unableToParseState]\n  },\n  stateInteractionTypeMismatchError: {\n    code: stateInteractionTypeMismatch,\n    desc: BrowserAuthErrorMessages[stateInteractionTypeMismatch]\n  },\n  interactionInProgress: {\n    code: interactionInProgress,\n    desc: BrowserAuthErrorMessages[interactionInProgress]\n  },\n  popupWindowError: {\n    code: popupWindowError,\n    desc: BrowserAuthErrorMessages[popupWindowError]\n  },\n  emptyWindowError: {\n    code: emptyWindowError,\n    desc: BrowserAuthErrorMessages[emptyWindowError]\n  },\n  userCancelledError: {\n    code: userCancelled,\n    desc: BrowserAuthErrorMessages[userCancelled]\n  },\n  monitorPopupTimeoutError: {\n    code: monitorPopupTimeout,\n    desc: BrowserAuthErrorMessages[monitorPopupTimeout]\n  },\n  monitorIframeTimeoutError: {\n    code: monitorWindowTimeout,\n    desc: BrowserAuthErrorMessages[monitorWindowTimeout]\n  },\n  redirectInIframeError: {\n    code: redirectInIframe,\n    desc: BrowserAuthErrorMessages[redirectInIframe]\n  },\n  blockTokenRequestsInHiddenIframeError: {\n    code: blockIframeReload,\n    desc: BrowserAuthErrorMessages[blockIframeReload]\n  },\n  blockAcquireTokenInPopupsError: {\n    code: blockNestedPopups,\n    desc: BrowserAuthErrorMessages[blockNestedPopups]\n  },\n  iframeClosedPrematurelyError: {\n    code: iframeClosedPrematurely,\n    desc: BrowserAuthErrorMessages[iframeClosedPrematurely]\n  },\n  silentLogoutUnsupportedError: {\n    code: silentLogoutUnsupported,\n    desc: BrowserAuthErrorMessages[silentLogoutUnsupported]\n  },\n  noAccountError: {\n    code: noAccountError,\n    desc: BrowserAuthErrorMessages[noAccountError]\n  },\n  silentPromptValueError: {\n    code: silentPromptValueError,\n    desc: BrowserAuthErrorMessages[silentPromptValueError]\n  },\n  noTokenRequestCacheError: {\n    code: noTokenRequestCacheError,\n    desc: BrowserAuthErrorMessages[noTokenRequestCacheError]\n  },\n  unableToParseTokenRequestCacheError: {\n    code: unableToParseTokenRequestCacheError,\n    desc: BrowserAuthErrorMessages[unableToParseTokenRequestCacheError]\n  },\n  authRequestNotSet: {\n    code: authRequestNotSetError,\n    desc: BrowserAuthErrorMessages[authRequestNotSetError]\n  },\n  invalidCacheType: {\n    code: invalidCacheType,\n    desc: BrowserAuthErrorMessages[invalidCacheType]\n  },\n  notInBrowserEnvironment: {\n    code: nonBrowserEnvironment,\n    desc: BrowserAuthErrorMessages[nonBrowserEnvironment]\n  },\n  databaseNotOpen: {\n    code: databaseNotOpen,\n    desc: BrowserAuthErrorMessages[databaseNotOpen]\n  },\n  noNetworkConnectivity: {\n    code: noNetworkConnectivity,\n    desc: BrowserAuthErrorMessages[noNetworkConnectivity]\n  },\n  postRequestFailed: {\n    code: postRequestFailed,\n    desc: BrowserAuthErrorMessages[postRequestFailed]\n  },\n  getRequestFailed: {\n    code: getRequestFailed,\n    desc: BrowserAuthErrorMessages[getRequestFailed]\n  },\n  failedToParseNetworkResponse: {\n    code: failedToParseResponse,\n    desc: BrowserAuthErrorMessages[failedToParseResponse]\n  },\n  unableToLoadTokenError: {\n    code: unableToLoadToken,\n    desc: BrowserAuthErrorMessages[unableToLoadToken]\n  },\n  signingKeyNotFoundInStorage: {\n    code: cryptoKeyNotFound,\n    desc: BrowserAuthErrorMessages[cryptoKeyNotFound]\n  },\n  authCodeRequired: {\n    code: authCodeRequired,\n    desc: BrowserAuthErrorMessages[authCodeRequired]\n  },\n  authCodeOrNativeAccountRequired: {\n    code: authCodeOrNativeAccountIdRequired,\n    desc: BrowserAuthErrorMessages[authCodeOrNativeAccountIdRequired]\n  },\n  spaCodeAndNativeAccountPresent: {\n    code: spaCodeAndNativeAccountIdPresent,\n    desc: BrowserAuthErrorMessages[spaCodeAndNativeAccountIdPresent]\n  },\n  databaseUnavailable: {\n    code: databaseUnavailable,\n    desc: BrowserAuthErrorMessages[databaseUnavailable]\n  },\n  unableToAcquireTokenFromNativePlatform: {\n    code: unableToAcquireTokenFromNativePlatform,\n    desc: BrowserAuthErrorMessages[unableToAcquireTokenFromNativePlatform]\n  },\n  nativeHandshakeTimeout: {\n    code: nativeHandshakeTimeout,\n    desc: BrowserAuthErrorMessages[nativeHandshakeTimeout]\n  },\n  nativeExtensionNotInstalled: {\n    code: nativeExtensionNotInstalled,\n    desc: BrowserAuthErrorMessages[nativeExtensionNotInstalled]\n  },\n  nativeConnectionNotEstablished: {\n    code: nativeConnectionNotEstablished,\n    desc: BrowserAuthErrorMessages[nativeConnectionNotEstablished]\n  },\n  uninitializedPublicClientApplication: {\n    code: uninitializedPublicClientApplication,\n    desc: BrowserAuthErrorMessages[uninitializedPublicClientApplication]\n  },\n  nativePromptNotSupported: {\n    code: nativePromptNotSupported,\n    desc: BrowserAuthErrorMessages[nativePromptNotSupported]\n  },\n  invalidBase64StringError: {\n    code: invalidBase64String,\n    desc: BrowserAuthErrorMessages[invalidBase64String]\n  },\n  invalidPopTokenRequest: {\n    code: invalidPopTokenRequest,\n    desc: BrowserAuthErrorMessages[invalidPopTokenRequest]\n  }\n};\n/**\r\n * Browser library error class thrown by the MSAL.js library for SPAs\r\n */\nclass BrowserAuthError extends AuthError {\n  constructor(errorCode, subError) {\n    super(errorCode, BrowserAuthErrorMessages[errorCode], subError);\n    Object.setPrototypeOf(this, BrowserAuthError.prototype);\n    this.name = \"BrowserAuthError\";\n  }\n}\nfunction createBrowserAuthError(errorCode, subError) {\n  return new BrowserAuthError(errorCode, subError);\n}\nexport { BrowserAuthError, BrowserAuthErrorMessage, BrowserAuthErrorMessages, createBrowserAuthError };","map":{"version":3,"names":["ErrorLink","BrowserAuthErrorMessages","pkceNotCreated","earJwkEmpty","earJweEmpty","cryptoNonExistent","emptyNavigateUri","hashEmptyError","noStateInHash","hashDoesNotContainKnownProperties","unableToParseState","stateInteractionTypeMismatch","interactionInProgress","popupWindowError","emptyWindowError","userCancelled","monitorPopupTimeout","monitorWindowTimeout","redirectInIframe","blockIframeReload","blockNestedPopups","iframeClosedPrematurely","silentLogoutUnsupported","noAccountError","silentPromptValueError","noTokenRequestCacheError","unableToParseTokenRequestCacheError","authRequestNotSetError","invalidCacheType","nonBrowserEnvironment","databaseNotOpen","noNetworkConnectivity","postRequestFailed","getRequestFailed","failedToParseResponse","unableToLoadToken","cryptoKeyNotFound","authCodeRequired","authCodeOrNativeAccountIdRequired","spaCodeAndNativeAccountIdPresent","databaseUnavailable","unableToAcquireTokenFromNativePlatform","nativeHandshakeTimeout","nativeExtensionNotInstalled","nativeConnectionNotEstablished","uninitializedPublicClientApplication","nativePromptNotSupported","invalidBase64String","invalidPopTokenRequest","failedToBuildHeaders","failedToParseHeaders","failedToDecryptEarResponse","timedOut","BrowserAuthErrorMessage","pkceNotGenerated","code","desc","cryptoDoesNotExist","emptyNavigateUriError","hashDoesNotContainStateError","hashDoesNotContainKnownPropertiesError","unableToParseStateError","stateInteractionTypeMismatchError","userCancelledError","monitorPopupTimeoutError","monitorIframeTimeoutError","redirectInIframeError","blockTokenRequestsInHiddenIframeError","blockAcquireTokenInPopupsError","iframeClosedPrematurelyError","silentLogoutUnsupportedError","authRequestNotSet","notInBrowserEnvironment","failedToParseNetworkResponse","unableToLoadTokenError","signingKeyNotFoundInStorage","authCodeOrNativeAccountRequired","spaCodeAndNativeAccountPresent","invalidBase64StringError","BrowserAuthError","AuthError","constructor","errorCode","subError","Object","setPrototypeOf","prototype","name","createBrowserAuthError"],"sources":["/Users/user/workspace/eventhorizon/node_modules/@azure/msal-browser/src/error/BrowserAuthError.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"@azure/msal-common/browser\";\nimport * as BrowserAuthErrorCodes from \"./BrowserAuthErrorCodes.js\";\nexport { BrowserAuthErrorCodes }; // Allow importing as \"BrowserAuthErrorCodes\"\n\nconst ErrorLink = \"For more visit: aka.ms/msaljs/browser-errors\";\n\n/**\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\n */\nexport const BrowserAuthErrorMessages = {\n    [BrowserAuthErrorCodes.pkceNotCreated]:\n        \"The PKCE code challenge and verifier could not be generated.\",\n    [BrowserAuthErrorCodes.earJwkEmpty]:\n        \"No EAR encryption key provided. This is unexpected.\",\n    [BrowserAuthErrorCodes.earJweEmpty]:\n        \"Server response does not contain ear_jwe property. This is unexpected.\",\n    [BrowserAuthErrorCodes.cryptoNonExistent]:\n        \"The crypto object or function is not available.\",\n    [BrowserAuthErrorCodes.emptyNavigateUri]:\n        \"Navigation URI is empty. Please check stack trace for more info.\",\n    [BrowserAuthErrorCodes.hashEmptyError]: `Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash. ${ErrorLink}`,\n    [BrowserAuthErrorCodes.noStateInHash]:\n        \"Hash does not contain state. Please verify that the request originated from msal.\",\n    [BrowserAuthErrorCodes.hashDoesNotContainKnownProperties]: `Hash does not contain known properites. Please verify that your redirectUri is not changing the hash.  ${ErrorLink}`,\n    [BrowserAuthErrorCodes.unableToParseState]:\n        \"Unable to parse state. Please verify that the request originated from msal.\",\n    [BrowserAuthErrorCodes.stateInteractionTypeMismatch]:\n        \"Hash contains state but the interaction type does not match the caller.\",\n    [BrowserAuthErrorCodes.interactionInProgress]: `Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.   ${ErrorLink}`,\n    [BrowserAuthErrorCodes.popupWindowError]:\n        \"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.\",\n    [BrowserAuthErrorCodes.emptyWindowError]:\n        \"window.open returned null or undefined window object.\",\n    [BrowserAuthErrorCodes.userCancelled]: \"User cancelled the flow.\",\n    [BrowserAuthErrorCodes.monitorPopupTimeout]: `Token acquisition in popup failed due to timeout.  ${ErrorLink}`,\n    [BrowserAuthErrorCodes.monitorWindowTimeout]: `Token acquisition in iframe failed due to timeout.  ${ErrorLink}`,\n    [BrowserAuthErrorCodes.redirectInIframe]:\n        \"Redirects are not supported for iframed or brokered applications. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs.\",\n    [BrowserAuthErrorCodes.blockIframeReload]: `Request was blocked inside an iframe because MSAL detected an authentication response.  ${ErrorLink}`,\n    [BrowserAuthErrorCodes.blockNestedPopups]:\n        \"Request was blocked inside a popup because MSAL detected it was running in a popup.\",\n    [BrowserAuthErrorCodes.iframeClosedPrematurely]:\n        \"The iframe being monitored was closed prematurely.\",\n    [BrowserAuthErrorCodes.silentLogoutUnsupported]:\n        \"Silent logout not supported. Please call logoutRedirect or logoutPopup instead.\",\n    [BrowserAuthErrorCodes.noAccountError]:\n        \"No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request.\",\n    [BrowserAuthErrorCodes.silentPromptValueError]:\n        \"The value given for the prompt value is not valid for silent requests - must be set to 'none' or 'no_session'.\",\n    [BrowserAuthErrorCodes.noTokenRequestCacheError]:\n        \"No token request found in cache.\",\n    [BrowserAuthErrorCodes.unableToParseTokenRequestCacheError]:\n        \"The cached token request could not be parsed.\",\n    [BrowserAuthErrorCodes.authRequestNotSetError]:\n        \"Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler\",\n    [BrowserAuthErrorCodes.invalidCacheType]: \"Invalid cache type\",\n    [BrowserAuthErrorCodes.nonBrowserEnvironment]:\n        \"Login and token requests are not supported in non-browser environments.\",\n    [BrowserAuthErrorCodes.databaseNotOpen]: \"Database is not open!\",\n    [BrowserAuthErrorCodes.noNetworkConnectivity]:\n        \"No network connectivity. Check your internet connection.\",\n    [BrowserAuthErrorCodes.postRequestFailed]:\n        \"Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'\",\n    [BrowserAuthErrorCodes.getRequestFailed]:\n        \"Network request failed. Please check the network trace to determine root cause.\",\n    [BrowserAuthErrorCodes.failedToParseResponse]:\n        \"Failed to parse network response. Check network trace.\",\n    [BrowserAuthErrorCodes.unableToLoadToken]: \"Error loading token to cache.\",\n    [BrowserAuthErrorCodes.cryptoKeyNotFound]:\n        \"Cryptographic Key or Keypair not found in browser storage.\",\n    [BrowserAuthErrorCodes.authCodeRequired]:\n        \"An authorization code must be provided (as the `code` property on the request) to this flow.\",\n    [BrowserAuthErrorCodes.authCodeOrNativeAccountIdRequired]:\n        \"An authorization code or nativeAccountId must be provided to this flow.\",\n    [BrowserAuthErrorCodes.spaCodeAndNativeAccountIdPresent]:\n        \"Request cannot contain both spa code and native account id.\",\n    [BrowserAuthErrorCodes.databaseUnavailable]:\n        \"IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts.\",\n    [BrowserAuthErrorCodes.unableToAcquireTokenFromNativePlatform]: `Unable to acquire token from native platform.  ${ErrorLink}`,\n    [BrowserAuthErrorCodes.nativeHandshakeTimeout]:\n        \"Timed out while attempting to establish connection to browser extension\",\n    [BrowserAuthErrorCodes.nativeExtensionNotInstalled]:\n        \"Native extension is not installed. If you think this is a mistake call the initialize function.\",\n    [BrowserAuthErrorCodes.nativeConnectionNotEstablished]: `Connection to native platform has not been established. Please install a compatible browser extension and run initialize().  ${ErrorLink}`,\n    [BrowserAuthErrorCodes.uninitializedPublicClientApplication]: `You must call and await the initialize function before attempting to call any other MSAL API.  ${ErrorLink}`,\n    [BrowserAuthErrorCodes.nativePromptNotSupported]:\n        \"The provided prompt is not supported by the native platform. This request should be routed to the web based flow.\",\n    [BrowserAuthErrorCodes.invalidBase64String]:\n        \"Invalid base64 encoded string.\",\n    [BrowserAuthErrorCodes.invalidPopTokenRequest]:\n        \"Invalid PoP token request. The request should not have both a popKid value and signPopToken set to true.\",\n    [BrowserAuthErrorCodes.failedToBuildHeaders]:\n        \"Failed to build request headers object.\",\n    [BrowserAuthErrorCodes.failedToParseHeaders]:\n        \"Failed to parse response headers\",\n    [BrowserAuthErrorCodes.failedToDecryptEarResponse]:\n        \"Failed to decrypt ear response\",\n    [BrowserAuthErrorCodes.timedOut]: \"The request timed out.\",\n};\n\n/**\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\n * @deprecated Use exported BrowserAuthErrorCodes instead.\n * In your app you can do :\n * ```\n * import { BrowserAuthErrorCodes } from \"@azure/msal-browser\";\n * ```\n */\nexport const BrowserAuthErrorMessage = {\n    pkceNotGenerated: {\n        code: BrowserAuthErrorCodes.pkceNotCreated,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.pkceNotCreated],\n    },\n    cryptoDoesNotExist: {\n        code: BrowserAuthErrorCodes.cryptoNonExistent,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.cryptoNonExistent],\n    },\n    emptyNavigateUriError: {\n        code: BrowserAuthErrorCodes.emptyNavigateUri,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.emptyNavigateUri],\n    },\n    hashEmptyError: {\n        code: BrowserAuthErrorCodes.hashEmptyError,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.hashEmptyError],\n    },\n    hashDoesNotContainStateError: {\n        code: BrowserAuthErrorCodes.noStateInHash,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.noStateInHash],\n    },\n    hashDoesNotContainKnownPropertiesError: {\n        code: BrowserAuthErrorCodes.hashDoesNotContainKnownProperties,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.hashDoesNotContainKnownProperties\n        ],\n    },\n    unableToParseStateError: {\n        code: BrowserAuthErrorCodes.unableToParseState,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.unableToParseState\n        ],\n    },\n    stateInteractionTypeMismatchError: {\n        code: BrowserAuthErrorCodes.stateInteractionTypeMismatch,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.stateInteractionTypeMismatch\n        ],\n    },\n    interactionInProgress: {\n        code: BrowserAuthErrorCodes.interactionInProgress,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.interactionInProgress\n        ],\n    },\n    popupWindowError: {\n        code: BrowserAuthErrorCodes.popupWindowError,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.popupWindowError],\n    },\n    emptyWindowError: {\n        code: BrowserAuthErrorCodes.emptyWindowError,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.emptyWindowError],\n    },\n    userCancelledError: {\n        code: BrowserAuthErrorCodes.userCancelled,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.userCancelled],\n    },\n    monitorPopupTimeoutError: {\n        code: BrowserAuthErrorCodes.monitorPopupTimeout,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.monitorPopupTimeout\n        ],\n    },\n    monitorIframeTimeoutError: {\n        code: BrowserAuthErrorCodes.monitorWindowTimeout,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.monitorWindowTimeout\n        ],\n    },\n    redirectInIframeError: {\n        code: BrowserAuthErrorCodes.redirectInIframe,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.redirectInIframe],\n    },\n    blockTokenRequestsInHiddenIframeError: {\n        code: BrowserAuthErrorCodes.blockIframeReload,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.blockIframeReload],\n    },\n    blockAcquireTokenInPopupsError: {\n        code: BrowserAuthErrorCodes.blockNestedPopups,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.blockNestedPopups],\n    },\n    iframeClosedPrematurelyError: {\n        code: BrowserAuthErrorCodes.iframeClosedPrematurely,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.iframeClosedPrematurely\n        ],\n    },\n    silentLogoutUnsupportedError: {\n        code: BrowserAuthErrorCodes.silentLogoutUnsupported,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.silentLogoutUnsupported\n        ],\n    },\n    noAccountError: {\n        code: BrowserAuthErrorCodes.noAccountError,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.noAccountError],\n    },\n    silentPromptValueError: {\n        code: BrowserAuthErrorCodes.silentPromptValueError,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.silentPromptValueError\n        ],\n    },\n    noTokenRequestCacheError: {\n        code: BrowserAuthErrorCodes.noTokenRequestCacheError,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.noTokenRequestCacheError\n        ],\n    },\n    unableToParseTokenRequestCacheError: {\n        code: BrowserAuthErrorCodes.unableToParseTokenRequestCacheError,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.unableToParseTokenRequestCacheError\n        ],\n    },\n    authRequestNotSet: {\n        code: BrowserAuthErrorCodes.authRequestNotSetError,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.authRequestNotSetError\n        ],\n    },\n    invalidCacheType: {\n        code: BrowserAuthErrorCodes.invalidCacheType,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.invalidCacheType],\n    },\n    notInBrowserEnvironment: {\n        code: BrowserAuthErrorCodes.nonBrowserEnvironment,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.nonBrowserEnvironment\n        ],\n    },\n    databaseNotOpen: {\n        code: BrowserAuthErrorCodes.databaseNotOpen,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.databaseNotOpen],\n    },\n    noNetworkConnectivity: {\n        code: BrowserAuthErrorCodes.noNetworkConnectivity,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.noNetworkConnectivity\n        ],\n    },\n    postRequestFailed: {\n        code: BrowserAuthErrorCodes.postRequestFailed,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.postRequestFailed],\n    },\n    getRequestFailed: {\n        code: BrowserAuthErrorCodes.getRequestFailed,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.getRequestFailed],\n    },\n    failedToParseNetworkResponse: {\n        code: BrowserAuthErrorCodes.failedToParseResponse,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.failedToParseResponse\n        ],\n    },\n    unableToLoadTokenError: {\n        code: BrowserAuthErrorCodes.unableToLoadToken,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.unableToLoadToken],\n    },\n    signingKeyNotFoundInStorage: {\n        code: BrowserAuthErrorCodes.cryptoKeyNotFound,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.cryptoKeyNotFound],\n    },\n    authCodeRequired: {\n        code: BrowserAuthErrorCodes.authCodeRequired,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.authCodeRequired],\n    },\n    authCodeOrNativeAccountRequired: {\n        code: BrowserAuthErrorCodes.authCodeOrNativeAccountIdRequired,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.authCodeOrNativeAccountIdRequired\n        ],\n    },\n    spaCodeAndNativeAccountPresent: {\n        code: BrowserAuthErrorCodes.spaCodeAndNativeAccountIdPresent,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.spaCodeAndNativeAccountIdPresent\n        ],\n    },\n    databaseUnavailable: {\n        code: BrowserAuthErrorCodes.databaseUnavailable,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.databaseUnavailable\n        ],\n    },\n    unableToAcquireTokenFromNativePlatform: {\n        code: BrowserAuthErrorCodes.unableToAcquireTokenFromNativePlatform,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.unableToAcquireTokenFromNativePlatform\n        ],\n    },\n    nativeHandshakeTimeout: {\n        code: BrowserAuthErrorCodes.nativeHandshakeTimeout,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.nativeHandshakeTimeout\n        ],\n    },\n    nativeExtensionNotInstalled: {\n        code: BrowserAuthErrorCodes.nativeExtensionNotInstalled,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.nativeExtensionNotInstalled\n        ],\n    },\n    nativeConnectionNotEstablished: {\n        code: BrowserAuthErrorCodes.nativeConnectionNotEstablished,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.nativeConnectionNotEstablished\n        ],\n    },\n    uninitializedPublicClientApplication: {\n        code: BrowserAuthErrorCodes.uninitializedPublicClientApplication,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.uninitializedPublicClientApplication\n        ],\n    },\n    nativePromptNotSupported: {\n        code: BrowserAuthErrorCodes.nativePromptNotSupported,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.nativePromptNotSupported\n        ],\n    },\n    invalidBase64StringError: {\n        code: BrowserAuthErrorCodes.invalidBase64String,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.invalidBase64String\n        ],\n    },\n    invalidPopTokenRequest: {\n        code: BrowserAuthErrorCodes.invalidPopTokenRequest,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.invalidPopTokenRequest\n        ],\n    },\n};\n\n/**\n * Browser library error class thrown by the MSAL.js library for SPAs\n */\nexport class BrowserAuthError extends AuthError {\n    constructor(errorCode: string, subError?: string) {\n        super(errorCode, BrowserAuthErrorMessages[errorCode], subError);\n\n        Object.setPrototypeOf(this, BrowserAuthError.prototype);\n        this.name = \"BrowserAuthError\";\n    }\n}\n\nexport function createBrowserAuthError(\n    errorCode: string,\n    subError?: string\n): BrowserAuthError {\n    return new BrowserAuthError(errorCode, subError);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}