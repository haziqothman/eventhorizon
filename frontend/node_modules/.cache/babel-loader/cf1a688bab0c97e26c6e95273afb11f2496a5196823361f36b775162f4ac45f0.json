{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createDefaultPipeline } from \"./clientHelpers.js\";\nimport { sendRequest } from \"./sendRequest.js\";\nimport { buildRequestUrl } from \"./urlHelpers.js\";\nimport { isNodeLike } from \"../util/checkEnvironment.js\";\n/**\n * Creates a client with a default pipeline\n * @param endpoint - Base endpoint for the client\n * @param credentials - Credentials to authenticate the requests\n * @param options - Client options\n */\nexport function getClient(endpoint, clientOptions = {}) {\n  var _a, _b, _c;\n  const pipeline = (_a = clientOptions.pipeline) !== null && _a !== void 0 ? _a : createDefaultPipeline(clientOptions);\n  if ((_b = clientOptions.additionalPolicies) === null || _b === void 0 ? void 0 : _b.length) {\n    for (const {\n      policy,\n      position\n    } of clientOptions.additionalPolicies) {\n      // Sign happens after Retry and is commonly needed to occur\n      // before policies that intercept post-retry.\n      const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n      pipeline.addPolicy(policy, {\n        afterPhase\n      });\n    }\n  }\n  const {\n    allowInsecureConnection,\n    httpClient\n  } = clientOptions;\n  const endpointUrl = (_c = clientOptions.endpoint) !== null && _c !== void 0 ? _c : endpoint;\n  const client = (path, ...args) => {\n    const getUrl = requestOptions => buildRequestUrl(endpointUrl, path, args, Object.assign({\n      allowInsecureConnection\n    }, requestOptions));\n    return {\n      get: (requestOptions = {}) => {\n        return buildOperation(\"GET\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      post: (requestOptions = {}) => {\n        return buildOperation(\"POST\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      put: (requestOptions = {}) => {\n        return buildOperation(\"PUT\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      patch: (requestOptions = {}) => {\n        return buildOperation(\"PATCH\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      delete: (requestOptions = {}) => {\n        return buildOperation(\"DELETE\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      head: (requestOptions = {}) => {\n        return buildOperation(\"HEAD\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      options: (requestOptions = {}) => {\n        return buildOperation(\"OPTIONS\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      trace: (requestOptions = {}) => {\n        return buildOperation(\"TRACE\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      }\n    };\n  };\n  return {\n    path: client,\n    pathUnchecked: client,\n    pipeline\n  };\n}\nfunction buildOperation(method, url, pipeline, options, allowInsecureConnection, httpClient) {\n  var _a;\n  allowInsecureConnection = (_a = options.allowInsecureConnection) !== null && _a !== void 0 ? _a : allowInsecureConnection;\n  return {\n    then: function (onFulfilled, onrejected) {\n      return sendRequest(method, url, pipeline, Object.assign(Object.assign({}, options), {\n        allowInsecureConnection\n      }), httpClient).then(onFulfilled, onrejected);\n    },\n    async asBrowserStream() {\n      if (isNodeLike) {\n        throw new Error(\"`asBrowserStream` is supported only in the browser environment. Use `asNodeStream` instead to obtain the response body stream. If you require a Web stream of the response in Node, consider using `Readable.toWeb` on the result of `asNodeStream`.\");\n      } else {\n        return sendRequest(method, url, pipeline, Object.assign(Object.assign({}, options), {\n          allowInsecureConnection,\n          responseAsStream: true\n        }), httpClient);\n      }\n    },\n    async asNodeStream() {\n      if (isNodeLike) {\n        return sendRequest(method, url, pipeline, Object.assign(Object.assign({}, options), {\n          allowInsecureConnection,\n          responseAsStream: true\n        }), httpClient);\n      } else {\n        throw new Error(\"`isNodeStream` is not supported in the browser environment. Use `asBrowserStream` to obtain the response body stream.\");\n      }\n    }\n  };\n}","map":{"version":3,"names":["createDefaultPipeline","sendRequest","buildRequestUrl","isNodeLike","getClient","endpoint","clientOptions","pipeline","_a","_b","additionalPolicies","length","policy","position","afterPhase","undefined","addPolicy","allowInsecureConnection","httpClient","endpointUrl","_c","client","path","args","getUrl","requestOptions","Object","assign","get","buildOperation","post","put","patch","delete","head","options","trace","pathUnchecked","method","url","then","onFulfilled","onrejected","asBrowserStream","Error","responseAsStream","asNodeStream"],"sources":["/Users/user/workspace/eventhorizon/node_modules/@typespec/ts-http-runtime/src/client/getClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { HttpClient, HttpMethods } from \"../interfaces.js\";\nimport type { Pipeline } from \"../pipeline.js\";\nimport { createDefaultPipeline } from \"./clientHelpers.js\";\nimport type {\n  Client,\n  ClientOptions,\n  HttpBrowserStreamResponse,\n  HttpNodeStreamResponse,\n  RequestParameters,\n  ResourceMethods,\n  StreamableMethod,\n} from \"./common.js\";\nimport { sendRequest } from \"./sendRequest.js\";\nimport { buildRequestUrl } from \"./urlHelpers.js\";\nimport { isNodeLike } from \"../util/checkEnvironment.js\";\n\n/**\n * Creates a client with a default pipeline\n * @param endpoint - Base endpoint for the client\n * @param credentials - Credentials to authenticate the requests\n * @param options - Client options\n */\nexport function getClient(endpoint: string, clientOptions: ClientOptions = {}): Client {\n  const pipeline = clientOptions.pipeline ?? createDefaultPipeline(clientOptions);\n  if (clientOptions.additionalPolicies?.length) {\n    for (const { policy, position } of clientOptions.additionalPolicies) {\n      // Sign happens after Retry and is commonly needed to occur\n      // before policies that intercept post-retry.\n      const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n      pipeline.addPolicy(policy, {\n        afterPhase,\n      });\n    }\n  }\n\n  const { allowInsecureConnection, httpClient } = clientOptions;\n  const endpointUrl = clientOptions.endpoint ?? endpoint;\n  const client = (path: string, ...args: Array<any>): ResourceMethods<StreamableMethod> => {\n    const getUrl = (requestOptions: RequestParameters): string =>\n      buildRequestUrl(endpointUrl, path, args, { allowInsecureConnection, ...requestOptions });\n\n    return {\n      get: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"GET\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      post: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"POST\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      put: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"PUT\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      patch: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"PATCH\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      delete: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"DELETE\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      head: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"HEAD\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      options: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"OPTIONS\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      trace: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"TRACE\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n    };\n  };\n\n  return {\n    path: client,\n    pathUnchecked: client,\n    pipeline,\n  };\n}\n\nfunction buildOperation(\n  method: HttpMethods,\n  url: string,\n  pipeline: Pipeline,\n  options: RequestParameters,\n  allowInsecureConnection?: boolean,\n  httpClient?: HttpClient,\n): StreamableMethod {\n  allowInsecureConnection = options.allowInsecureConnection ?? allowInsecureConnection;\n  return {\n    then: function (onFulfilled, onrejected) {\n      return sendRequest(\n        method,\n        url,\n        pipeline,\n        { ...options, allowInsecureConnection },\n        httpClient,\n      ).then(onFulfilled, onrejected);\n    },\n    async asBrowserStream() {\n      if (isNodeLike) {\n        throw new Error(\n          \"`asBrowserStream` is supported only in the browser environment. Use `asNodeStream` instead to obtain the response body stream. If you require a Web stream of the response in Node, consider using `Readable.toWeb` on the result of `asNodeStream`.\",\n        );\n      } else {\n        return sendRequest(\n          method,\n          url,\n          pipeline,\n          { ...options, allowInsecureConnection, responseAsStream: true },\n          httpClient,\n        ) as Promise<HttpBrowserStreamResponse>;\n      }\n    },\n    async asNodeStream() {\n      if (isNodeLike) {\n        return sendRequest(\n          method,\n          url,\n          pipeline,\n          { ...options, allowInsecureConnection, responseAsStream: true },\n          httpClient,\n        ) as Promise<HttpNodeStreamResponse>;\n      } else {\n        throw new Error(\n          \"`isNodeStream` is not supported in the browser environment. Use `asBrowserStream` to obtain the response body stream.\",\n        );\n      }\n    },\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}