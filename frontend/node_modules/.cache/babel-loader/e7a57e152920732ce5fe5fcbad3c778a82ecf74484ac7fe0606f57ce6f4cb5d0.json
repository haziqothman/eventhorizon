{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { ensureSecureConnection } from \"./checkInsecureConnection.js\";\n/**\n * Name of the Bearer Authentication Policy\n */\nexport const bearerAuthenticationPolicyName = \"bearerAuthenticationPolicy\";\n/**\n * Gets a pipeline policy that adds bearer token authentication to requests\n */\nexport function bearerAuthenticationPolicy(options) {\n  return {\n    name: bearerAuthenticationPolicyName,\n    async sendRequest(request, next) {\n      var _a, _b;\n      // Ensure allowInsecureConnection is explicitly set when sending request to non-https URLs\n      ensureSecureConnection(request, options);\n      const scheme = (_b = (_a = request.authSchemes) !== null && _a !== void 0 ? _a : options.authSchemes) === null || _b === void 0 ? void 0 : _b.find(x => x.kind === \"http\" && x.scheme === \"bearer\");\n      // Skip adding authentication header if no bearer authentication scheme is found\n      if (!scheme) {\n        return next(request);\n      }\n      const token = await options.credential.getBearerToken({\n        abortSignal: request.abortSignal\n      });\n      request.headers.set(\"Authorization\", `Bearer ${token}`);\n      return next(request);\n    }\n  };\n}","map":{"version":3,"names":["ensureSecureConnection","bearerAuthenticationPolicyName","bearerAuthenticationPolicy","options","name","sendRequest","request","next","scheme","_b","_a","authSchemes","find","x","kind","token","credential","getBearerToken","abortSignal","headers","set"],"sources":["/Users/user/workspace/eventhorizon/node_modules/@typespec/ts-http-runtime/src/policies/auth/bearerAuthenticationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { BearerTokenCredential } from \"../../auth/credentials.js\";\nimport type { AuthScheme } from \"../../auth/schemes.js\";\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../../interfaces.js\";\nimport type { PipelinePolicy } from \"../../pipeline.js\";\nimport { ensureSecureConnection } from \"./checkInsecureConnection.js\";\n\n/**\n * Name of the Bearer Authentication Policy\n */\nexport const bearerAuthenticationPolicyName = \"bearerAuthenticationPolicy\";\n\n/**\n * Options for configuring the bearer authentication policy\n */\nexport interface BearerAuthenticationPolicyOptions {\n  /**\n   * The BearerTokenCredential implementation that can supply the bearer token.\n   */\n  credential: BearerTokenCredential;\n  /**\n   * Optional authentication schemes to use. If not provided, schemes from the request will be used.\n   */\n  authSchemes?: AuthScheme[];\n  /**\n   * Allows for connecting to HTTP endpoints instead of enforcing HTTPS.\n   * CAUTION: Never use this option in production.\n   */\n  allowInsecureConnection?: boolean;\n}\n\n/**\n * Gets a pipeline policy that adds bearer token authentication to requests\n */\nexport function bearerAuthenticationPolicy(\n  options: BearerAuthenticationPolicyOptions,\n): PipelinePolicy {\n  return {\n    name: bearerAuthenticationPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      // Ensure allowInsecureConnection is explicitly set when sending request to non-https URLs\n      ensureSecureConnection(request, options);\n\n      const scheme = (request.authSchemes ?? options.authSchemes)?.find(\n        (x) => x.kind === \"http\" && x.scheme === \"bearer\",\n      );\n\n      // Skip adding authentication header if no bearer authentication scheme is found\n      if (!scheme) {\n        return next(request);\n      }\n\n      const token = await options.credential.getBearerToken({\n        abortSignal: request.abortSignal,\n      });\n      request.headers.set(\"Authorization\", `Bearer ${token}`);\n      return next(request);\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AAMA,SAASA,sBAAsB,QAAQ,8BAA8B;AAErE;;;AAGA,OAAO,MAAMC,8BAA8B,GAAG,4BAA4B;AAqB1E;;;AAGA,OAAM,SAAUC,0BAA0BA,CACxCC,OAA0C;EAE1C,OAAO;IACLC,IAAI,EAAEH,8BAA8B;IACpC,MAAMI,WAAWA,CAACC,OAAwB,EAAEC,IAAiB;;MAC3D;MACAP,sBAAsB,CAACM,OAAO,EAAEH,OAAO,CAAC;MAExC,MAAMK,MAAM,GAAG,CAAAC,EAAA,GAAC,CAAAC,EAAA,GAAAJ,OAAO,CAACK,WAAW,cAAAD,EAAA,cAAAA,EAAA,GAAIP,OAAO,CAACQ,WAAY,cAAAF,EAAA,uBAAAA,EAAA,CAAEG,IAAI,CAC9DC,CAAC,IAAKA,CAAC,CAACC,IAAI,KAAK,MAAM,IAAID,CAAC,CAACL,MAAM,KAAK,QAAQ,CAClD;MAED;MACA,IAAI,CAACA,MAAM,EAAE;QACX,OAAOD,IAAI,CAACD,OAAO,CAAC;MACtB;MAEA,MAAMS,KAAK,GAAG,MAAMZ,OAAO,CAACa,UAAU,CAACC,cAAc,CAAC;QACpDC,WAAW,EAAEZ,OAAO,CAACY;OACtB,CAAC;MACFZ,OAAO,CAACa,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUL,KAAK,EAAE,CAAC;MACvD,OAAOR,IAAI,CAACD,OAAO,CAAC;IACtB;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}