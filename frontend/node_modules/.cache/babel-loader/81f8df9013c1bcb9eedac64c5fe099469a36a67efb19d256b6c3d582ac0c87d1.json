{"ast":null,"code":"require(\"dotenv\").config();\nconst express = require(\"express\");\nconst sql = require(\"mssql\");\nconst cors = require(\"cors\");\nconst app = express();\n\n// 1. MIDDLEWARE SETUP (ORDER IS CRUCIAL)\napp.use(express.json()); // Must come first to parse JSON bodies\napp.use(express.urlencoded({\n  extended: true\n}));\n\n// Enhanced CORS configuration\napp.use(cors({\n  origin: [\"http://localhost:3000\", \"https://eventhorizon-eufth7a5ambghxef.azurewebsites.net\"],\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],\n  allowedHeaders: [\"Content-Type\", \"Authorization\"],\n  credentials: true\n}));\n\n// Request logging middleware\napp.use((req, res, next) => {\n  console.log(`[${new Date().toISOString()}] ${req.method} ${req.path}`);\n  next();\n});\n\n// Database configuration\nconst config = {\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD.replace(/'/g, \"\"),\n  server: process.env.DB_SERVER,\n  database: process.env.DB_NAME,\n  options: {\n    encrypt: true,\n    trustServerCertificate: false\n  }\n};\n\n// Database connection pool\nlet pool;\nconst connectDB = async () => {\n  try {\n    pool = await sql.connect(config);\n    console.log(\"Connected to SQL Server\");\n  } catch (err) {\n    console.error(\"Database connection failed:\", err);\n    setTimeout(connectDB, 5000);\n  }\n};\nconnectDB();\n\n// 2. ROUTES WITH PROPER ERROR HANDLING\n\n// POST /events - Create new event\napp.post(\"/events\", async (req, res) => {\n  try {\n    // Validate request body\n    if (!req.body || Object.keys(req.body).length === 0) {\n      return res.status(400).json({\n        error: \"Request body is empty\"\n      });\n    }\n    const {\n      name,\n      date,\n      location\n    } = req.body;\n\n    // Validate required fields\n    if (!name || !date || !location) {\n      return res.status(400).json({\n        error: \"All fields are required\",\n        received: {\n          name,\n          date,\n          location\n        }\n      });\n    }\n    const result = await pool.request().input(\"name\", sql.NVarChar(100), name).input(\"date\", sql.DateTime, new Date(date)).input(\"location\", sql.NVarChar(100), location).query(`\n        INSERT INTO Events (name, date, location)\n        OUTPUT INSERTED.*\n        VALUES (@name, @date, @location)\n      `);\n    res.status(201).json(result.recordset[0]);\n  } catch (err) {\n    console.error(\"POST /events error:\", err);\n    res.status(500).json({\n      error: \"Failed to create event\"\n    });\n  }\n});\n\n// PUT /events/:id - Update event\napp.put(\"/events/:id\", async (req, res) => {\n  try {\n    // Validate request body\n    if (!req.body || Object.keys(req.body).length === 0) {\n      return res.status(400).json({\n        error: \"Request body is empty\"\n      });\n    }\n    const {\n      id\n    } = req.params;\n    const {\n      name,\n      date,\n      location\n    } = req.body;\n\n    // Check if event exists\n    const exists = await pool.request().input(\"id\", sql.Int, id).query(\"SELECT 1 FROM Events WHERE id = @id\");\n    if (exists.recordset.length === 0) {\n      return res.status(404).json({\n        error: \"Event not found\"\n      });\n    }\n    const result = await pool.request().input(\"id\", sql.Int, id).input(\"name\", sql.NVarChar(100), name).input(\"date\", sql.DateTime, new Date(date)).input(\"location\", sql.NVarChar(100), location).query(`\n        UPDATE Events\n        SET name = @name, date = @date, location = @location\n        OUTPUT INSERTED.*\n        WHERE id = @id\n      `);\n    res.json(result.recordset[0]);\n  } catch (err) {\n    console.error(\"PUT /events error:\", err);\n    res.status(500).json({\n      error: \"Failed to update event\"\n    });\n  }\n});\n\n// GET /events - Get all events\napp.get(\"/events\", async (req, res) => {\n  try {\n    const result = await pool.request().query(\"SELECT * FROM Events ORDER BY date DESC\");\n    res.json(result.recordset);\n  } catch (err) {\n    console.error(\"GET /events error:\", err);\n    res.status(500).json({\n      error: \"Failed to fetch events\"\n    });\n  }\n});\n\n// DELETE /events/:id - Delete event\napp.delete(\"/events/:id\", async (req, res) => {\n  try {\n    const {\n      id\n    } = req.params;\n    const result = await pool.request().input(\"id\", sql.Int, id).query(\"DELETE FROM Events OUTPUT DELETED.* WHERE id = @id\");\n    if (result.recordset.length === 0) {\n      return res.status(404).json({\n        error: \"Event not found\"\n      });\n    }\n    res.json({\n      message: \"Event deleted successfully\",\n      event: result.recordset[0]\n    });\n  } catch (err) {\n    console.error(\"DELETE /events error:\", err);\n    res.status(500).json({\n      error: \"Failed to delete event\"\n    });\n  }\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error(\"Unhandled error:\", err);\n  res.status(500).json({\n    error: \"Internal server error\"\n  });\n});\n\n// Start server\nconst PORT = process.env.PORT || 8000;\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on port ${PORT}`);\n});","map":{"version":3,"names":["require","config","express","sql","cors","app","use","json","urlencoded","extended","origin","methods","allowedHeaders","credentials","req","res","next","console","log","Date","toISOString","method","path","user","process","env","DB_USER","password","DB_PASSWORD","replace","server","DB_SERVER","database","DB_NAME","options","encrypt","trustServerCertificate","pool","connectDB","connect","err","error","setTimeout","post","body","Object","keys","length","status","name","date","location","received","result","request","input","NVarChar","DateTime","query","recordset","put","id","params","exists","Int","get","delete","message","event","PORT","listen"],"sources":["/Users/user/workspace/eventhorizon/frontend/src/App.js"],"sourcesContent":["require(\"dotenv\").config();\nconst express = require(\"express\");\nconst sql = require(\"mssql\");\nconst cors = require(\"cors\");\n\nconst app = express();\n\n// 1. MIDDLEWARE SETUP (ORDER IS CRUCIAL)\napp.use(express.json()); // Must come first to parse JSON bodies\napp.use(express.urlencoded({ extended: true }));\n\n// Enhanced CORS configuration\napp.use(\n  cors({\n    origin: [\n      \"http://localhost:3000\",\n      \"https://eventhorizon-eufth7a5ambghxef.azurewebsites.net\",\n    ],\n    methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],\n    allowedHeaders: [\"Content-Type\", \"Authorization\"],\n    credentials: true,\n  })\n);\n\n// Request logging middleware\napp.use((req, res, next) => {\n  console.log(`[${new Date().toISOString()}] ${req.method} ${req.path}`);\n  next();\n});\n\n// Database configuration\nconst config = {\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD.replace(/'/g, \"\"),\n  server: process.env.DB_SERVER,\n  database: process.env.DB_NAME,\n  options: {\n    encrypt: true,\n    trustServerCertificate: false,\n  },\n};\n\n// Database connection pool\nlet pool;\nconst connectDB = async () => {\n  try {\n    pool = await sql.connect(config);\n    console.log(\"Connected to SQL Server\");\n  } catch (err) {\n    console.error(\"Database connection failed:\", err);\n    setTimeout(connectDB, 5000);\n  }\n};\nconnectDB();\n\n// 2. ROUTES WITH PROPER ERROR HANDLING\n\n// POST /events - Create new event\napp.post(\"/events\", async (req, res) => {\n  try {\n    // Validate request body\n    if (!req.body || Object.keys(req.body).length === 0) {\n      return res.status(400).json({ error: \"Request body is empty\" });\n    }\n\n    const { name, date, location } = req.body;\n\n    // Validate required fields\n    if (!name || !date || !location) {\n      return res.status(400).json({\n        error: \"All fields are required\",\n        received: { name, date, location },\n      });\n    }\n\n    const result = await pool\n      .request()\n      .input(\"name\", sql.NVarChar(100), name)\n      .input(\"date\", sql.DateTime, new Date(date))\n      .input(\"location\", sql.NVarChar(100), location).query(`\n        INSERT INTO Events (name, date, location)\n        OUTPUT INSERTED.*\n        VALUES (@name, @date, @location)\n      `);\n\n    res.status(201).json(result.recordset[0]);\n  } catch (err) {\n    console.error(\"POST /events error:\", err);\n    res.status(500).json({ error: \"Failed to create event\" });\n  }\n});\n\n// PUT /events/:id - Update event\napp.put(\"/events/:id\", async (req, res) => {\n  try {\n    // Validate request body\n    if (!req.body || Object.keys(req.body).length === 0) {\n      return res.status(400).json({ error: \"Request body is empty\" });\n    }\n\n    const { id } = req.params;\n    const { name, date, location } = req.body;\n\n    // Check if event exists\n    const exists = await pool\n      .request()\n      .input(\"id\", sql.Int, id)\n      .query(\"SELECT 1 FROM Events WHERE id = @id\");\n\n    if (exists.recordset.length === 0) {\n      return res.status(404).json({ error: \"Event not found\" });\n    }\n\n    const result = await pool\n      .request()\n      .input(\"id\", sql.Int, id)\n      .input(\"name\", sql.NVarChar(100), name)\n      .input(\"date\", sql.DateTime, new Date(date))\n      .input(\"location\", sql.NVarChar(100), location).query(`\n        UPDATE Events\n        SET name = @name, date = @date, location = @location\n        OUTPUT INSERTED.*\n        WHERE id = @id\n      `);\n\n    res.json(result.recordset[0]);\n  } catch (err) {\n    console.error(\"PUT /events error:\", err);\n    res.status(500).json({ error: \"Failed to update event\" });\n  }\n});\n\n// GET /events - Get all events\napp.get(\"/events\", async (req, res) => {\n  try {\n    const result = await pool\n      .request()\n      .query(\"SELECT * FROM Events ORDER BY date DESC\");\n    res.json(result.recordset);\n  } catch (err) {\n    console.error(\"GET /events error:\", err);\n    res.status(500).json({ error: \"Failed to fetch events\" });\n  }\n});\n\n// DELETE /events/:id - Delete event\napp.delete(\"/events/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await pool\n      .request()\n      .input(\"id\", sql.Int, id)\n      .query(\"DELETE FROM Events OUTPUT DELETED.* WHERE id = @id\");\n\n    if (result.recordset.length === 0) {\n      return res.status(404).json({ error: \"Event not found\" });\n    }\n\n    res.json({\n      message: \"Event deleted successfully\",\n      event: result.recordset[0],\n    });\n  } catch (err) {\n    console.error(\"DELETE /events error:\", err);\n    res.status(500).json({ error: \"Failed to delete event\" });\n  }\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error(\"Unhandled error:\", err);\n  res.status(500).json({ error: \"Internal server error\" });\n});\n\n// Start server\nconst PORT = process.env.PORT || 8000;\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on port ${PORT}`);\n});\n"],"mappings":"AAAAA,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,CAAC,CAAC;AAC1B,MAAMC,OAAO,GAAGF,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMG,GAAG,GAAGH,OAAO,CAAC,OAAO,CAAC;AAC5B,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMK,GAAG,GAAGH,OAAO,CAAC,CAAC;;AAErB;AACAG,GAAG,CAACC,GAAG,CAACJ,OAAO,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACzBF,GAAG,CAACC,GAAG,CAACJ,OAAO,CAACM,UAAU,CAAC;EAAEC,QAAQ,EAAE;AAAK,CAAC,CAAC,CAAC;;AAE/C;AACAJ,GAAG,CAACC,GAAG,CACLF,IAAI,CAAC;EACHM,MAAM,EAAE,CACN,uBAAuB,EACvB,yDAAyD,CAC1D;EACDC,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,CAAC;EACpDC,cAAc,EAAE,CAAC,cAAc,EAAE,eAAe,CAAC;EACjDC,WAAW,EAAE;AACf,CAAC,CACH,CAAC;;AAED;AACAR,GAAG,CAACC,GAAG,CAAC,CAACQ,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EAC1BC,OAAO,CAACC,GAAG,CAAC,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,KAAKN,GAAG,CAACO,MAAM,IAAIP,GAAG,CAACQ,IAAI,EAAE,CAAC;EACtEN,IAAI,CAAC,CAAC;AACR,CAAC,CAAC;;AAEF;AACA,MAAMf,MAAM,GAAG;EACbsB,IAAI,EAAEC,OAAO,CAACC,GAAG,CAACC,OAAO;EACzBC,QAAQ,EAAEH,OAAO,CAACC,GAAG,CAACG,WAAW,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EACnDC,MAAM,EAAEN,OAAO,CAACC,GAAG,CAACM,SAAS;EAC7BC,QAAQ,EAAER,OAAO,CAACC,GAAG,CAACQ,OAAO;EAC7BC,OAAO,EAAE;IACPC,OAAO,EAAE,IAAI;IACbC,sBAAsB,EAAE;EAC1B;AACF,CAAC;;AAED;AACA,IAAIC,IAAI;AACR,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EAC5B,IAAI;IACFD,IAAI,GAAG,MAAMlC,GAAG,CAACoC,OAAO,CAACtC,MAAM,CAAC;IAChCgB,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EACxC,CAAC,CAAC,OAAOsB,GAAG,EAAE;IACZvB,OAAO,CAACwB,KAAK,CAAC,6BAA6B,EAAED,GAAG,CAAC;IACjDE,UAAU,CAACJ,SAAS,EAAE,IAAI,CAAC;EAC7B;AACF,CAAC;AACDA,SAAS,CAAC,CAAC;;AAEX;;AAEA;AACAjC,GAAG,CAACsC,IAAI,CAAC,SAAS,EAAE,OAAO7B,GAAG,EAAEC,GAAG,KAAK;EACtC,IAAI;IACF;IACA,IAAI,CAACD,GAAG,CAAC8B,IAAI,IAAIC,MAAM,CAACC,IAAI,CAAChC,GAAG,CAAC8B,IAAI,CAAC,CAACG,MAAM,KAAK,CAAC,EAAE;MACnD,OAAOhC,GAAG,CAACiC,MAAM,CAAC,GAAG,CAAC,CAACzC,IAAI,CAAC;QAAEkC,KAAK,EAAE;MAAwB,CAAC,CAAC;IACjE;IAEA,MAAM;MAAEQ,IAAI;MAAEC,IAAI;MAAEC;IAAS,CAAC,GAAGrC,GAAG,CAAC8B,IAAI;;IAEzC;IACA,IAAI,CAACK,IAAI,IAAI,CAACC,IAAI,IAAI,CAACC,QAAQ,EAAE;MAC/B,OAAOpC,GAAG,CAACiC,MAAM,CAAC,GAAG,CAAC,CAACzC,IAAI,CAAC;QAC1BkC,KAAK,EAAE,yBAAyB;QAChCW,QAAQ,EAAE;UAAEH,IAAI;UAAEC,IAAI;UAAEC;QAAS;MACnC,CAAC,CAAC;IACJ;IAEA,MAAME,MAAM,GAAG,MAAMhB,IAAI,CACtBiB,OAAO,CAAC,CAAC,CACTC,KAAK,CAAC,MAAM,EAAEpD,GAAG,CAACqD,QAAQ,CAAC,GAAG,CAAC,EAAEP,IAAI,CAAC,CACtCM,KAAK,CAAC,MAAM,EAAEpD,GAAG,CAACsD,QAAQ,EAAE,IAAItC,IAAI,CAAC+B,IAAI,CAAC,CAAC,CAC3CK,KAAK,CAAC,UAAU,EAAEpD,GAAG,CAACqD,QAAQ,CAAC,GAAG,CAAC,EAAEL,QAAQ,CAAC,CAACO,KAAK,CAAC;AAC5D;AACA;AACA;AACA,OAAO,CAAC;IAEJ3C,GAAG,CAACiC,MAAM,CAAC,GAAG,CAAC,CAACzC,IAAI,CAAC8C,MAAM,CAACM,SAAS,CAAC,CAAC,CAAC,CAAC;EAC3C,CAAC,CAAC,OAAOnB,GAAG,EAAE;IACZvB,OAAO,CAACwB,KAAK,CAAC,qBAAqB,EAAED,GAAG,CAAC;IACzCzB,GAAG,CAACiC,MAAM,CAAC,GAAG,CAAC,CAACzC,IAAI,CAAC;MAAEkC,KAAK,EAAE;IAAyB,CAAC,CAAC;EAC3D;AACF,CAAC,CAAC;;AAEF;AACApC,GAAG,CAACuD,GAAG,CAAC,aAAa,EAAE,OAAO9C,GAAG,EAAEC,GAAG,KAAK;EACzC,IAAI;IACF;IACA,IAAI,CAACD,GAAG,CAAC8B,IAAI,IAAIC,MAAM,CAACC,IAAI,CAAChC,GAAG,CAAC8B,IAAI,CAAC,CAACG,MAAM,KAAK,CAAC,EAAE;MACnD,OAAOhC,GAAG,CAACiC,MAAM,CAAC,GAAG,CAAC,CAACzC,IAAI,CAAC;QAAEkC,KAAK,EAAE;MAAwB,CAAC,CAAC;IACjE;IAEA,MAAM;MAAEoB;IAAG,CAAC,GAAG/C,GAAG,CAACgD,MAAM;IACzB,MAAM;MAAEb,IAAI;MAAEC,IAAI;MAAEC;IAAS,CAAC,GAAGrC,GAAG,CAAC8B,IAAI;;IAEzC;IACA,MAAMmB,MAAM,GAAG,MAAM1B,IAAI,CACtBiB,OAAO,CAAC,CAAC,CACTC,KAAK,CAAC,IAAI,EAAEpD,GAAG,CAAC6D,GAAG,EAAEH,EAAE,CAAC,CACxBH,KAAK,CAAC,qCAAqC,CAAC;IAE/C,IAAIK,MAAM,CAACJ,SAAS,CAACZ,MAAM,KAAK,CAAC,EAAE;MACjC,OAAOhC,GAAG,CAACiC,MAAM,CAAC,GAAG,CAAC,CAACzC,IAAI,CAAC;QAAEkC,KAAK,EAAE;MAAkB,CAAC,CAAC;IAC3D;IAEA,MAAMY,MAAM,GAAG,MAAMhB,IAAI,CACtBiB,OAAO,CAAC,CAAC,CACTC,KAAK,CAAC,IAAI,EAAEpD,GAAG,CAAC6D,GAAG,EAAEH,EAAE,CAAC,CACxBN,KAAK,CAAC,MAAM,EAAEpD,GAAG,CAACqD,QAAQ,CAAC,GAAG,CAAC,EAAEP,IAAI,CAAC,CACtCM,KAAK,CAAC,MAAM,EAAEpD,GAAG,CAACsD,QAAQ,EAAE,IAAItC,IAAI,CAAC+B,IAAI,CAAC,CAAC,CAC3CK,KAAK,CAAC,UAAU,EAAEpD,GAAG,CAACqD,QAAQ,CAAC,GAAG,CAAC,EAAEL,QAAQ,CAAC,CAACO,KAAK,CAAC;AAC5D;AACA;AACA;AACA;AACA,OAAO,CAAC;IAEJ3C,GAAG,CAACR,IAAI,CAAC8C,MAAM,CAACM,SAAS,CAAC,CAAC,CAAC,CAAC;EAC/B,CAAC,CAAC,OAAOnB,GAAG,EAAE;IACZvB,OAAO,CAACwB,KAAK,CAAC,oBAAoB,EAAED,GAAG,CAAC;IACxCzB,GAAG,CAACiC,MAAM,CAAC,GAAG,CAAC,CAACzC,IAAI,CAAC;MAAEkC,KAAK,EAAE;IAAyB,CAAC,CAAC;EAC3D;AACF,CAAC,CAAC;;AAEF;AACApC,GAAG,CAAC4D,GAAG,CAAC,SAAS,EAAE,OAAOnD,GAAG,EAAEC,GAAG,KAAK;EACrC,IAAI;IACF,MAAMsC,MAAM,GAAG,MAAMhB,IAAI,CACtBiB,OAAO,CAAC,CAAC,CACTI,KAAK,CAAC,yCAAyC,CAAC;IACnD3C,GAAG,CAACR,IAAI,CAAC8C,MAAM,CAACM,SAAS,CAAC;EAC5B,CAAC,CAAC,OAAOnB,GAAG,EAAE;IACZvB,OAAO,CAACwB,KAAK,CAAC,oBAAoB,EAAED,GAAG,CAAC;IACxCzB,GAAG,CAACiC,MAAM,CAAC,GAAG,CAAC,CAACzC,IAAI,CAAC;MAAEkC,KAAK,EAAE;IAAyB,CAAC,CAAC;EAC3D;AACF,CAAC,CAAC;;AAEF;AACApC,GAAG,CAAC6D,MAAM,CAAC,aAAa,EAAE,OAAOpD,GAAG,EAAEC,GAAG,KAAK;EAC5C,IAAI;IACF,MAAM;MAAE8C;IAAG,CAAC,GAAG/C,GAAG,CAACgD,MAAM;IACzB,MAAMT,MAAM,GAAG,MAAMhB,IAAI,CACtBiB,OAAO,CAAC,CAAC,CACTC,KAAK,CAAC,IAAI,EAAEpD,GAAG,CAAC6D,GAAG,EAAEH,EAAE,CAAC,CACxBH,KAAK,CAAC,oDAAoD,CAAC;IAE9D,IAAIL,MAAM,CAACM,SAAS,CAACZ,MAAM,KAAK,CAAC,EAAE;MACjC,OAAOhC,GAAG,CAACiC,MAAM,CAAC,GAAG,CAAC,CAACzC,IAAI,CAAC;QAAEkC,KAAK,EAAE;MAAkB,CAAC,CAAC;IAC3D;IAEA1B,GAAG,CAACR,IAAI,CAAC;MACP4D,OAAO,EAAE,4BAA4B;MACrCC,KAAK,EAAEf,MAAM,CAACM,SAAS,CAAC,CAAC;IAC3B,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOnB,GAAG,EAAE;IACZvB,OAAO,CAACwB,KAAK,CAAC,uBAAuB,EAAED,GAAG,CAAC;IAC3CzB,GAAG,CAACiC,MAAM,CAAC,GAAG,CAAC,CAACzC,IAAI,CAAC;MAAEkC,KAAK,EAAE;IAAyB,CAAC,CAAC;EAC3D;AACF,CAAC,CAAC;;AAEF;AACApC,GAAG,CAACC,GAAG,CAAC,CAACkC,GAAG,EAAE1B,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EAC/BC,OAAO,CAACwB,KAAK,CAAC,kBAAkB,EAAED,GAAG,CAAC;EACtCzB,GAAG,CAACiC,MAAM,CAAC,GAAG,CAAC,CAACzC,IAAI,CAAC;IAAEkC,KAAK,EAAE;EAAwB,CAAC,CAAC;AAC1D,CAAC,CAAC;;AAEF;AACA,MAAM4B,IAAI,GAAG7C,OAAO,CAACC,GAAG,CAAC4C,IAAI,IAAI,IAAI;AACrChE,GAAG,CAACiE,MAAM,CAACD,IAAI,EAAE,SAAS,EAAE,MAAM;EAChCpD,OAAO,CAACC,GAAG,CAAC,0BAA0BmD,IAAI,EAAE,CAAC;AAC/C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}